apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgresdb.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "postgresdb.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "postgresdb.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "postgresdb.fullname" . }}-headless
  replicas: 1
  minReadySeconds: 10
  template:
    metadata:
      name: {{ include "postgresdb.fullname" . }}
      labels:
        {{- include "postgresdb.selectorLabels" . | nindent 4 }}
        {{- with .Values.podLabels }}
          {{- toYaml . | nindent 4 }}
        {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 4 }}
        {{- end }}
    spec:          
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "postgresdb.tplvalues" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "postgresdb.tplvalues" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "postgresdb.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "postgresdb.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "postgresdb.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "postgresdb.tplvalues" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "postgresdb.tplvalues" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "postgresdb.tplvalues" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podPriorityClassName }}
      priorityClassName: {{ .Values.podPriorityClassName }}
      {{- end }}
      terminationGracePeriodSeconds: 10
      securityContext:
        fsGroup: 1001
      initContainers:
      {{- if ( and .Values.persistence.enabled .Values.initChownData.enabled ) }}
        - name: init-chown-data
          image: "{{ .Values.initChownData.image.repository }}:{{ .Values.initChownData.image.tag }}"
          imagePullPolicy: {{ .Values.initChownData.image.pullPolicy }}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          command: ["chown", "-R", "1001:1001", "/dbdata"]
          resources:
            {{ toYaml .Values.initChownData.resources | indent 12 }}
          volumeMounts:
            - name: dbdata
              mountPath: "/dbdata"
      {{- end }}
        - name: gyeetaInitPostgres
          image: {{ include "postgresdb.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 8 }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: CFG_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgresql.fullname" . }}
                  key: "postgres-password"
            - name: CFG_POSTGRES_PORT
              value: {{ .Values.postgresdb_config.port | quote }}
          {{- range $key, $value := .Values.extra.envinit }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
          {{- end }}
          args:
            - "--initdb"
            {{- with .Values.extra.argsinit }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.resources }}
          resources:
            {{ toYaml .Values.resources | indent 12 }}
          {{- end }}              
          volumeMounts:
            - name: dbdata
              mountPath: "/dbdata"
            {{- with .Values.mounts.volumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}              
      containers:
        - name: {{ .Chart.Name }}
          image: {{ include "postgresdb.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            readOnlyRootFilesystem: true 
          args:
            - start
            {{- with .Values.extra.args }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          env:
          {{- range $key, $value := .Values.extra.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
          {{- end }}
          ports:
            - name: tcp-postgresql
              containerPort: {{ .Values.postgresdb_config.port }}
          {{- if .Values.livenessEnabled }}    
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1
            exec:
              command:
                - /bin/bash
                - -c
                - exec /postgresdb/bin/pg_isready -U "postgres" -h 127.0.0.1 -p {{ .Values.postgresdb_config.port }}
          {{- end }}      
          volumeMounts:
           - name: dbdata
              mountPath: "/dbdata"
           {{- with .Values.mounts.volumeMounts }}
             {{- toYaml . | nindent 12 }}
           {{- end }}              
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "postgresdb.tplvalues" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
      volumes:
        {{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
        - name: dbdata
          persistentVolumeClaim:
            claimName: {{ tpl .Values.persistence.existingClaim $ }}
        {{- else if not .Values.persistence.enabled }}  
        - name: dbdata
          emptyDir: {}
        {{- end }}  
        {{- with .Values.mounts.volumes }}
          {{- toYaml . | nindent 4 }}
        {{- end }}
  {- if and .Values.persistence.enabled (not .Values.persistence.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- if .Values.persistence.annotations }}
        annotations: {{- toYaml .Values.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        {{- if .Values.persistence.dataSourceRef }}
        dataSourceRef: {{- include "postgresdb.tplvalues" (dict "value" .Values.persistence.dataSourceRef "context" $) | nindent 10 }}
        {{- else if .Values.persistence.dataSource }}
        dataSource: {{- include "postgresdb.tplvalues" (dict "value" .Values.persistence.dataSource "context" $) | nindent 10 }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{- if .Values.persistence.selector }}
        selector: {{- include "postgresdb.tplvalues" (dict "value" .Values.persistence.selector "context" $) | nindent 10 }}
        {{- end }}
        {{- include "postgresdb.storage.class" (dict "persistence" .Values.persistence "global" .Values.global) | nindent 8 }}
  {{- end }} 

