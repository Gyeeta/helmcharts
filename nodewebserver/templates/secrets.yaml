apiVersion: v1
kind: Secret
metadata:
  name: {{ include "nodewebserver.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "nodewebserver.labels" . | nindent 4 }}
{{- with .Values.podAnnotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
type: Opaque
stringData:
  {{- with .Values.nodewebserver_config }}
  nodewebserver_main.cfg: |-
    CFG_SHYAMA_HOSTS='{{ mustToJson .shyama_hosts }}'
    CFG_SHYAMA_PORTS='{{ mustToJson .shyama_ports }}'
    CFG_LISTENER_PORT={{ .service.port | int }}
    CFG_AUTHTYPE='basic'
    {{- if .admin_password }}
    CFG_ADMINPASSWORD={{ .admin_password | squote }}
    {{- end }}  
    {{- if .userpass_json }}
    CFG_USERPASSFILE='/etc/nodewebserver/userpass.json'
    {{- end }}  
    {{- if and (not .admin_password) (not .userpass_json) }}
    CFG_ADMINPASSWORD={{ printf "%s-nodepass" .Release.Name | squote -}}
    {{- end }}  
    {{- if .tokenexpiry }}
    CFG_TOKENEXPIRY={{ .tokenexpiry }}
    {{- end }}  
    {{- if .jwtsecret }}
    CFG_JWTSECRET={{ .jwtsecret | squote }}
    {{- else }}
    CFG_JWTSECRET='JwtSecret'
    {{- end }}  
    {{- if not .https.enabled }}
    CFG_USEHTTP=true
    {{- else }}
    CFG_USEHTTP=false
    {{- if not .https.existing_secret_name }}
    CFG_TLSCERTFILE='/etc/nodewebserver/tls.crt'
    CFG_TLSKEYFILE='/etc/nodewebserver/tls.key'
    {{- if .https.passphrase }}
    CFG_TLSPASSPHRASE={{ .https.passphrase | squote }}
    {{- end }}  
    {{- else }}
    CFG_TLSCERTFILE='/etc/extnode/tls.crt'
    CFG_TLSKEYFILE='/etc/extnode/tls.key'
    {{- end }}  
    {{- end }}  
  {{- if .userpass_json }}
  userpass.json: |
{{ .userpass_json | indent 4 }}
  {{- end }}
  {{- if and .https.enabled (not .https.existing_secret_name) }}
  tls.crt: |
{{ .https.cert | indent 4 }}  
  tls.key: |
{{ .https.key | indent 4 }}  
  {{- end }}
  {{- end }}
---
{{- if .Values.nodewebserver_config.ingress.enabled }}
{{- if .Values.nodewebserver_config.ingress.secrets }}
{{- range .Values.nodewebserver_config.ingress.secrets }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ printf "%s-hosts" (include "nodewebserver.names.fullname" .) }}
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    {{- include "nodewebserver.labels" . | nindent 4 }}
{{- with .Values.podAnnotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
type: kubernetes.io/tls
data:
  tls.crt: {{ .certificate | b64enc }}
  tls.key: {{ .key | b64enc }}
---
{{- end }}
{{- end }}
{{- if and .Values.nodewebserver_config.ingress.tls .Values.nodewebserver_config.ingress.selfSigned }}
{{- $ca := genCA "gyeeta-ca" 365 }}
{{- $cert := genSignedCert .Values.nodewebserver_config.ingress.hostname nil (list .Values.nodewebserver_config.ingress.hostname) 365 $ca }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ printf "%s-tls" .Values.nodewebserver_config.ingress.hostname }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "nodewebserver.labels" . | nindent 4 }}
{{- with .Values.podAnnotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
type: kubernetes.io/tls
data:
  tls.crt: {{ $cert.Cert | b64enc | quote }}
  tls.key: {{ $cert.Key | b64enc | quote }}
  ca.crt: {{ $ca.Cert | b64enc | quote }}
{{- end }}
{{- end }}

